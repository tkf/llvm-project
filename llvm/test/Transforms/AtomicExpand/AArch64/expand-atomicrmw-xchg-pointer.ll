; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -O1 -S -mtriple=aarch64-- -atomic-expand %s | FileCheck %s
; RUN: opt -O1 -S -mtriple=aarch64-- -mattr=+outline-atomics -atomic-expand %s | FileCheck %s --check-prefix=OUTLINE-ATOMICS

define void @atomic_swap_pointer(i8** %ptr, i8* %val) nounwind {
; CHECK-LABEL: @atomic_swap_pointer(
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast i8** [[PTR:%.*]] to i64*
; CHECK-NEXT:    [[TMP2:%.*]] = ptrtoint i8* [[VAL:%.*]] to i64
; CHECK-NEXT:    br label [[ATOMICRMW_START:%.*]]
; CHECK:       atomicrmw.start:
; CHECK-NEXT:    [[TMP3:%.*]] = call i64 @llvm.aarch64.ldaxr.p0i64(i64* elementtype(i64) [[TMP1]])
; CHECK-NEXT:    [[TMP4:%.*]] = call i32 @llvm.aarch64.stxr.p0i64(i64 [[TMP2]], i64* elementtype(i64) [[TMP1]])
; CHECK-NEXT:    [[TRYAGAIN:%.*]] = icmp ne i32 [[TMP4]], 0
; CHECK-NEXT:    br i1 [[TRYAGAIN]], label [[ATOMICRMW_START]], label [[ATOMICRMW_END:%.*]]
; CHECK:       atomicrmw.end:
; CHECK-NEXT:    [[TMP5:%.*]] = inttoptr i64 [[TMP3]] to i8*
; CHECK-NEXT:    ret void
;
; OUTLINE-ATOMICS-LABEL: @atomic_swap_pointer(
; OUTLINE-ATOMICS-NEXT:    [[TMP1:%.*]] = bitcast i8** [[PTR:%.*]] to i64*
; OUTLINE-ATOMICS-NEXT:    [[TMP2:%.*]] = ptrtoint i8* [[VAL:%.*]] to i64
; OUTLINE-ATOMICS-NEXT:    [[TMP3:%.*]] = atomicrmw xchg i64* [[TMP1]], i64 [[TMP2]] acquire, align 8
; OUTLINE-ATOMICS-NEXT:    [[TMP4:%.*]] = inttoptr i64 [[TMP3]] to i8*
; OUTLINE-ATOMICS-NEXT:    ret void
;
  %t1 = atomicrmw xchg i8** %ptr, i8* %val acquire
  ret void
}
